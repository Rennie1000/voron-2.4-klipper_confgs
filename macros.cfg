[gcode_macro shine_bright]
gcode:
  SET_LED LED=neo RED=0.75 GREEN=0.75 BLUE=0.75

[gcode_macro night_mode]
gcode:
  SET_LED LED=neo RED=1 GREEN=0 BLUE=0

[gcode_macro purple_rain]
gcode:
  SET_LED LED=neo RED=1 GREEN=0 BLUE=1
[gcode_macro leds_off]
gcode:
  SET_LED LED=neo RED=0 GREEN=0 BLUE=0


[gcode_macro G32]
gcode:
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##  Uncomment for 300 build
    G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------

[gcode_macro PROBE_BED]
description: Calibrates Bed Mesh
gcode:
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE=default LOAD=default

[include klicky-bed-mesh-calibrate.cfg]

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
   # Load variables
   {% set bed_temp = params.BED_TEMP|default(110)|int %}
   {% set extruder_temp = params.EXTRUDER_TEMP|default(250)|int %}
   {% set chambertemp = params.CHAMBER|default(0)|int %}
   M117 Waiting on bed
   M190 S{bed_temp}
   # Pre-heat extruder to 160
   M104 S160
   # Load bed mesh
   BED_MESH_PROFILE LOAD=default 
   # Set GCODE offset
   # Home
   M117 Homing
   G28
   QUAD_GANTRY_LEVEL
   BED_MESH_CALIBRATE
   G28 Z
   SET_GCODE_OFFSET Z=0
   CALIBRATE_Z
   # Move Z up
   G1 Z10.0 F3000
   # Reset extruder
   G92 E0
   # Set extruder temperature
   M117 Waiting on nozzle
   M104 S{extruder_temp}
   # Move Z axis up a little to prevent scratching heat bed
   G1 Z2.0 F3000
   # Move to start position
   G1 X0.1 Y20 Z2.0 F5000.0
   # Wait for Extruder temperature
   M109 S{extruder_temp}
   M117 Purging
   # Move to start for purge line
   G1 X4.1 Y20 Z0.3 F5000.0
   # Draw 1st line
   G1 X4.1 Y150.0 Z0.3 F1500.0 E15
   # Move to side a little
   G1 X4.4 Y150.0 Z0.3 F5000.0
   # Draw 2nd line
   G1 X4.4 Y20 Z0.3 F1500.0 E30
   # Reset extruder
   G92 E0
   # Move Z up a little
   G1 Z5.0 F3000
   M117 Printing

[gcode_macro PLA_PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
   # Load variables
   {% set bed_temp = params.BED_TEMP|default(60)|int %}
   {% set extruder_temp = params.EXTRUDER_TEMP|default(220)|int %}
   {% set chambertemp = params.CHAMBER|default(0)|int %}
   M117 Waiting on bed
   M190 S{bed_temp}
   # Pre-heat extruder to 160
   M104 S140
   # Load bed mesh
   BED_MESH_PROFILE LOAD=default 
   # Set GCODE offset
   # Home
   M117 Homing
   G28
   QUAD_GANTRY_LEVEL
   BED_MESH_CALIBRATE
   G28 Z
   SET_GCODE_OFFSET Z=0
   CALIBRATE_Z
   # Move Z up
   G1 Z10.0 F3000
   # Reset extruder
   G92 E0
   # Set extruder temperature
   M117 Waiting on nozzle
   M104 S{extruder_temp}
   # Move Z axis up a little to prevent scratching heat bed
   G1 Z2.0 F3000
   # Move to start position
   G1 X0.1 Y20 Z2.0 F5000.0
   # Wait for Extruder temperature
   M109 S{extruder_temp}
   M117 Purging
   # Move to start for purge line
   G1 X4.1 Y20 Z0.3 F5000.0
   # Draw 1st line
   G1 X4.1 Y150.0 Z0.3 F1500.0 E15
   # Move to side a little
   G1 X4.4 Y150.0 Z0.3 F5000.0
   # Draw 2nd line
   G1 X4.4 Y20 Z0.3 F1500.0 E30
   # Reset extruder
   G92 E0
   # Move Z up a little
   G1 Z5.0 F3000
   M117 Printing


[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-5 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    G1 X5 Y275
    # Disable steppers
    M84

    
# MAINSAIL ITEMS #

[virtual_sdcard]
path: ~/gcode_files

[display_status]

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(230) %}      #edit to your park position
    {% set y = params.Y|default(230) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

# Bed mesh calibrate
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling with klicky automount
gcode:

    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("Bed Mesh Calibrate") }
    {% endif %}

    _CheckProbe action=query
	G90
    Attach_Probe

    _BED_MESH_CALIBRATE {% for p in params
           %}{'%s=%s ' % (p, params[p])}{%
          endfor %}

    Dock_Probe

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50

    ;; put the bed and nozzle where they're a safe distance apart
    G28
    CENTER

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

########################################
###           HEAT SOAK              ###
########################################
[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

############################################
#                 WLED
############################################

[gcode_macro WLED_ON]
description: Turn WLED strip on using optional preset and resets led colors
gcode:
  {% set strip = params.STRIP|string %}
  {% set preset = params.PRESET|default(-1)|int %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=True,
                             preset=preset)}

[gcode_macro WLED_OFF]
description: Turn WLED strip off
gcode:
  {% set strip = params.STRIP|string %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=False)}

[gcode_macro SET_WLED]
description: SET_LED like functionality for WLED, applies to all active segments
gcode:
    {% set strip = params.STRIP|string %}
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set index = params.INDEX|default(-1)|int %}
    {% set transmit = params.TRANSMIT|default(1)|int %}

    {action_call_remote_method("set_wled",
                               strip=strip,
                               red=red, green=green, blue=blue, white=white,
                               index=index, transmit=transmit)}



